-- Drop tables if they exist (order matters due to foreign key constraints)
DROP TABLE IF EXISTS RATING;
DROP TABLE IF EXISTS MOVIE_CAST;
DROP TABLE IF EXISTS MOVIES;
DROP TABLE IF EXISTS DIRECTOR;
DROP TABLE IF EXISTS ACTOR;

-- Create ACTOR table
CREATE TABLE ACTOR (
    ACT_ID INT PRIMARY KEY,
    ACT_NAME VARCHAR(50),
    ACT_GENDER CHAR
) ENGINE=InnoDB;

-- Create DIRECTOR table
CREATE TABLE DIRECTOR (
    DIR_ID INT PRIMARY KEY,
    DIR_NAME VARCHAR(50),
    DIR_PHONE VARCHAR(20)
) ENGINE=InnoDB;

-- Create MOVIES table
CREATE TABLE MOVIES (
    MOV_ID INT PRIMARY KEY,
    MOV_TITLE VARCHAR(50),
    MOV_YEAR INT,
    MOV_LANG VARCHAR(20),
    DIR_ID INT,
    FOREIGN KEY (DIR_ID) REFERENCES DIRECTOR(DIR_ID) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Create MOVIE_CAST table
CREATE TABLE MOVIE_CAST (
    ACT_ID INT,
    MOV_ID INT,
    ROLE VARCHAR(50),
    PRIMARY KEY (ACT_ID, MOV_ID),
    FOREIGN KEY (ACT_ID) REFERENCES ACTOR(ACT_ID) ON DELETE CASCADE,
    FOREIGN KEY (MOV_ID) REFERENCES MOVIES(MOV_ID) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Create RATING table
CREATE TABLE RATING (
    MOV_ID INT PRIMARY KEY,
    REV_STARS INT,
    FOREIGN KEY (MOV_ID) REFERENCES MOVIES(MOV_ID) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Insert data

-- ACTOR Data
INSERT INTO ACTOR VALUES (301, 'ANUSHKA', 'F');
INSERT INTO ACTOR VALUES (302, 'PRABHAS', 'M');
INSERT INTO ACTOR VALUES (303, 'PUNITH', 'M');
INSERT INTO ACTOR VALUES (304, 'JERMY', 'M');

-- DIRECTOR Data
INSERT INTO DIRECTOR VALUES (60, 'RAJAMOULI', '8751611001');
INSERT INTO DIRECTOR VALUES (61, 'HITCHCOCK', '7766138911');
INSERT INTO DIRECTOR VALUES (62, 'FARAN', '9986776531');
INSERT INTO DIRECTOR VALUES (63, 'STEVEN SPIELBERG', '8989776530');

-- MOVIES Data
INSERT INTO MOVIES VALUES (1001, 'BAHUBALI-2', 2017, 'TELAGU', 60);
INSERT INTO MOVIES VALUES (1002, 'BAHUBALI-1', 2015, 'TELAGU', 60);
INSERT INTO MOVIES VALUES (1003, 'AKASH', 2008, 'KANNADA', 61);
INSERT INTO MOVIES VALUES (1004, 'WAR HORSE', 2011, 'ENGLISH', 63);

-- MOVIE_CAST Data
INSERT INTO MOVIE_CAST VALUES (301, 1002, 'HEROINE');
INSERT INTO MOVIE_CAST VALUES (301, 1001, 'HEROINE');
INSERT INTO MOVIE_CAST VALUES (303, 1003, 'HERO');
INSERT INTO MOVIE_CAST VALUES (303, 1002, 'GUEST');
INSERT INTO MOVIE_CAST VALUES (304, 1004, 'HERO');

-- RATING Data
INSERT INTO RATING VALUES (1001, 4);
INSERT INTO RATING VALUES (1002, 2);
INSERT INTO RATING VALUES (1003, 5);
INSERT INTO RATING VALUES (1004, 4);
Q1:
SELECT MOV_TITLE
FROM MOVIES
WHERE DIR_ID IN (
  SELECT DIR_ID
  FROM DIRECTOR
  WHERE DIR_NAME = 'HITCHCOCK'
);
Q2:
SELECT M.MOV_TITLE
FROM MOVIES M
JOIN MOVIE_CAST MV ON M.MOV_ID = MV.MOV_ID
WHERE MV.ACT_ID IN (
    SELECT ACT_ID
    FROM MOVIE_CAST
    GROUP BY ACT_ID
    HAVING COUNT(*) > 1
)
GROUP BY M.MOV_TITLE
HAVING COUNT(*) > 1;
Q3:
SELECT A.ACT_NAME, M.MOV_TITLE, M.MOV_YEAR
FROM ACTOR A, MOVIE_CAST B, MOVIES M
WHERE A.ACT_ID = B.ACT_ID
  AND B.MOV_ID = M.MOV_ID
  AND M.MOV_YEAR NOT BETWEEN 2000 AND 2015;

Q4:
SELECT MOV_TITLE, MAX(REV_STARS) AS MAX_REV_STARS
FROM MOVIES
INNER JOIN RATING USING (MOV_ID)
GROUP BY MOV_TITLE
HAVING MAX(REV_STARS) > 0
ORDER BY MOV_TITLE;
Q5:
UPDATE RATING
SET REV_STARS = 5
WHERE MOV_ID IN (
    SELECT MOV_ID
    FROM MOVIES
    WHERE DIR_ID IN (
        SELECT DIR_ID
        FROM DIRECTOR
        WHERE DIR_NAME = 'STEVEN SPIELBERG'
    )
);

